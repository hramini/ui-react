// Generated by dts-bundle-generator v4.0.0

import { Component, ReactElement } from 'react';
import { IElement, IFrameBuilder, IFrameElementOption, IPrimer, IPrimerElement, IPrimerTarget, IPrimerUnitPrototype, ITagBuilder, ITagElementOption, IUnit, IUnitAlterStateOptions, IUnitOnBeforeUpdateCheck } from 'ui-wrapper';

export declare type TReactElement = ReactElement;
export interface IReactFrameElementOption<P, S> extends IFrameElementOption<TReactElement, P, S> {
	readonly UnitConstructor: new () => ReactUnit<P, S>;
}
export declare class ReactFrameBuilder implements IFrameBuilder<TReactElement> {
	buildElement<P = never, S = never, RequiredP extends P = P, RequiredS extends S = S>(param: IReactFrameElementOption<RequiredP, RequiredS>): IElement<TReactElement>;
}
export declare type IReactTagElementOption<P> = ITagElementOption<TReactElement, P>;
export declare class ReactTagBuilder implements ITagBuilder<TReactElement> {
	buildElement<P = never, RequiredP extends P = P>(param: IReactTagElementOption<RequiredP>): IElement<TReactElement>;
}
export declare class ReactPrimer implements IPrimer<TReactElement> {
	element: TReactElement;
	target: HTMLElement;
	readonly unitPrototype: IUnit<TReactElement, unknown, unknown>;
	constructor();
	getUnitPrototype(): IPrimerUnitPrototype<TReactElement>;
	setElement(param: IPrimerElement<TReactElement>): void;
	setTarget(param: IPrimerTarget): void;
	start(): void;
}
export declare abstract class ReactUnit<P, S> extends Component<P, S> implements IUnit<TReactElement, P, S> {
	abstract provide(): IElement<TReactElement>;
	constructor(props?: P);
	alterState<K extends keyof S>(param: IUnitAlterStateOptions<S, K>): void;
	componentDidMount(): void;
	shouldComponentUpdate(): boolean;
	componentDidUpdate(): void;
	componentWillUnmount(): void;
	render(): TReactElement;
	onBeforeProvide(): void;
	onAfterProvide(): void;
	onBeforeUpdate(): IUnitOnBeforeUpdateCheck;
	onAfterUpdate(): void;
	onBeforeDispose(): void;
}

export {};
